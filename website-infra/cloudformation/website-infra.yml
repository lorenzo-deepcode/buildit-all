AWSTemplateFormatVersion: "2010-09-09"
Description: > 
  Static Website infrastructure, single environment. 
  CloudFront with S3 Origin, https only (redirect http to https).
  Restricted access to S3 bucket.
  CloudFront logging (optional). 
  Creates a records on Route53.
  REQUIRES A VALID CERTIFICATE LOADED IN ACM, us-east-1.
  THIS STACK DOES NOT CREATE ANY DNS RECORD.


Parameters:
  SiteBucketName:
    Type: String
    Description: Name of the S3 bucket to be created for the website
    AllowedPattern: '^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])$'

  LogBucketName:
    Type: String
    Description: Name of the S3 bucket to be created for CloudFront logging (optional)
    AllowedPattern: '^((([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9]))?$'
    Default: ''

  WebsiteDnsName:
    # No DNS record is set for the name, but the CDN will include it as possible CNAME
    Type: String
    Description: Website FQ DNS name, Must be in the DNS Zone specified by 'DnsZoneName'. May be the APEX of the Zone.
    AllowedPattern: '^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])$'
    
  DnsZoneName:
    Type: String
    Description: Name of the DNS Zone (base domain name)
    AllowedPattern: '^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])$'

  CdnPriceClass:
    Type: String
    Description: CloudFront Price Class ('PriceClass_All', 'PriceClass_200' or 'PriceClass_100')
    Default: "PriceClass_All"
    AllowedValues:
      - "PriceClass_100"
      - "PriceClass_200"
      - "PriceClass_All"

  CertificateArn:
    Type: String
    Description: ACM Certificate ARM      

  ## A/B testing related parameters
  SiteExperimentBucketName:
    Type: String
    Description: Name of the S3 bucket to be created for A/B testing Experiment version (optional)
    AllowedPattern: '^((([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9]))?$'
    Default: ''    

  ABtestingOriginRequestFunctionArn:
    Type: String
    Description: ARN of the Lambda function to be attached as Origin Request, for A/B testing (optional; if defined enables A/B testing)
    Default: ''

  ABtestingViewerRequestFunctionArn:
    Type: String
    Description: ARN of the Lambda function to be attached as Viewer Request, for A/B testing (optional; mandatory if A/B testing is enabled)
    Default: ''
 
  ABtestingOriginResponseFunctionArn:
    Type: String
    Description: ARN of the Lambda function to be attached as Origin Response, for A/B testing (optional; mandatory if A/B testing is enabled)
    Default: ''
    

  ABTestingCookie:
    Type: String
    Description: "Name of the cookie used for A/B testing (default: 'X-Source')"
    Default: 'X-Source'

Mappings:
  # This mapping is required for the inconsistent naming of S3 Static Website Endpoints across Regions
  RegionToS3Domain:
    us-east-1:
      domain: "s3-website-us-east-1.amazonaws.com"
    us-east-2:
      domain: "s3-website.us-east-2.amazonaws.com"
    us-west-1:
      domain: "s3-website-us-west-1.amazonaws.com"
    us-west-2:
      domain: "s3-website-us-west-2.amazonaws.com"
    eu-west-1:
      domain: "s3-website-eu-west-1.amazonaws.com"
    eu-west-2:
      domain: "s3-website.eu-west-2.amazonaws.com"
    eu-west-3:
      domain: "s3-website.eu-west-3.amazonaws.com"
    eu-central-1:
      domain: "s3-website.eu-central-1.amazonaws.com"
    #...add more Region if required


Conditions:
  EnableCloudFrontLogging: !Not [ !Equals [ "", !Ref LogBucketName ] ]
  SetUpABtesting: !Not [ !Equals [ "", !Ref SiteExperimentBucketName ] ]
  EnableABtesting: !Not [ !Equals [ "", !Ref ABtestingOriginRequestFunctionArn ] ]

Resources:

  SiteMainBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref SiteBucketName
      WebsiteConfiguration:
        IndexDocument: index.html

  SiteExperimentBucket:
    Type: AWS::S3::Bucket
    Condition: SetUpABtesting
    Properties:
      BucketName: !Ref SiteExperimentBucketName
      WebsiteConfiguration:
        IndexDocument: index.html

  LogBucket:
    Type: AWS::S3::Bucket
    Condition: EnableCloudFrontLogging
    Properties:
      BucketName: !Ref LogBucketName

  SitMainBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref SiteMainBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          Sid: "1"
          Effect: "Allow"
          Principal: "*" # Custom Origin only. Comment out if using S3 Origin
          # # Uncomment if CloudFront Distribution is using S3 Origin
          # Principal:
          #   CanonicalUser: !GetAtt DistributionOriginAccessIdentity.S3CanonicalUserId
          Action: "s3:GetObject"
          Resource: !Join [ '/', [ !GetAtt SiteMainBucket.Arn, '*' ] ]

  SiteExperimentBuckletPolicy:
    Type: AWS::S3::BucketPolicy
    Condition: SetUpABtesting
    Properties:
      Bucket: !Ref SiteExperimentBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          Sid: "1"
          Effect: "Allow"
          Principal: "*" # Custom Origin only. Comment out if using S3 Origin
          # # Uncomment if CloudFront Distribution is using S3 Origin
          # Principal:
          #   CanonicalUser: !GetAtt DistributionOriginAccessIdentity.S3CanonicalUserId  
          Action: "s3:GetObject"
          Resource: !Join [ '/', [ !GetAtt SiteExperimentBucket.Arn, '*' ] ]    

  CdnDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: !Ref AWS::StackName
        Aliases:
          - !Ref WebsiteDnsName
        Enabled: 'true'
        DefaultRootObject: index.html
        PriceClass: !Ref CdnPriceClass
        HttpVersion: http2
        ViewerCertificate:
          AcmCertificateArn: !Ref CertificateArn
          SslSupportMethod: sni-only
        Logging:
          Fn::If:
            - EnableCloudFrontLogging
            - { Bucket: !GetAtt LogBucket.DomainName,  Prefix: cf } 
            - !Ref AWS::NoValue
        Origins:
          # Custom Origin mode. Comment out if using S3 Origin
          - DomainName: !Join [ '.', [ !Ref SiteMainBucket, !FindInMap [ RegionToS3Domain, !Ref "AWS::Region", domain ] ]]
            Id: main
            CustomOriginConfig:
              HTTPPort: '80'
              HTTPSPort: '443'
              OriginProtocolPolicy: http-only
          - Fn::If:
            - SetUpABtesting
            - DomainName: !Join [ '.', [ !Ref SiteExperimentBucket, !FindInMap [ RegionToS3Domain, !Ref "AWS::Region", domain ] ]]
              Id: experiment
              CustomOriginConfig:
                HTTPPort: '80'
                HTTPSPort: '443'
                OriginProtocolPolicy: http-only
            - !Ref AWS::NoValue

          # # S3 Origin. Uncomment if using S3 Origin mode
          # - DomainName: !GetAtt SiteMainBucket.DomainName
          #   Id: main
          #   S3OriginConfig:
          #     OriginAccessIdentity: !Join [ '/', [ "origin-access-identity/cloudfront", !Ref DistributionOriginAccessIdentity ] ]
          # - Fn::If:
          #   - SetUpABtesting
          #   - DomainName: !GetAtt SiteExperimentBucket.DomainName
          #     Id: experiment
          #     S3OriginConfig:
          #       OriginAccessIdentity: !Join [ '/', [ "origin-access-identity/cloudfront", !Ref DistributionOriginAccessIdentity ] ]
          #   - !Ref AWS::NoValue

        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
          TargetOriginId: main
          ForwardedValues:
            QueryString: 'false'
            Cookies:
              Forward: 
                Fn::If:
                  - EnableABtesting
                  - whitelist
                  - none
              WhitelistedNames:
                Fn::If:
                  - EnableABtesting
                  - [ !Ref ABTestingCookie ]
                  - !Ref AWS::NoValue
          ViewerProtocolPolicy: redirect-to-https
          Compress: 'true'
          LambdaFunctionAssociations:
            Fn::If:
              - EnableABtesting
              - - EventType: origin-request
                  LambdaFunctionARN: !Ref ABtestingOriginRequestFunctionArn
              - !Ref AWS::NoValue

  # # Uncomment if using S3 Origin mode            
  # DistributionOriginAccessIdentity:
  #   Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
  #   Properties:
  #     CloudFrontOriginAccessIdentityConfig:
  #       Comment: !Sub "Identity for ${AWS::StackName}"

Outputs:
  DistributionID:
    Description: CloudFront Distribution ID
    Value: !Ref CdnDistribution
    Export:
      Name: !Sub "${AWS::StackName}-DistributionID"

  DistributionDomainName:
    Description: DNS name of CloudFront Distribution
    Value: !GetAtt CdnDistribution.DomainName
    Export:
      Name: !Sub "${AWS::StackName}-DistributionDomainName"
  
  WebsiteDnsName:
    Description: FQ DNS name of the website
    Value: !Ref WebsiteDnsName
    Export:
      Name: !Sub "${AWS::StackName}-WebsiteDnsName"

  ZoneName:
    Description: Name of the DNS Zone (base domain)
    Value: !Ref DnsZoneName
    Export:
      Name: !Sub "${AWS::StackName}-ZoneName"


  CloudFrontLogBucket:
    Description: Bucket for CloudFront logging
    Value: !GetAtt LogBucket.DomainName
    Condition: EnableCloudFrontLogging
    Export:
      Name: !Sub "${AWS::StackName}-CloudFrontLogBucket"    
      

  # Name of the Main S3 bucket
  WebsiteMainBucket:
    Description: Name of the Main S3 bucket
    Value: !Ref SiteMainBucket
    Export:
      Name: !Sub "${AWS::StackName}-WebsiteMainBucket" 

  # Endpoint used for S3 Origin
  WebsiteMainBucketDomainName:
    Description: S3 endpoint of the Main bucket
    Value: !GetAtt SiteMainBucket.DomainName
    Export:
      Name: !Sub "${AWS::StackName}-WebsiteMainBucketDomainName" 

  # Endpoint used for Custom Origin
  WebsiteMainBucketStaticHostingEndpoint:
    Description: Static Website Hosting endpoint of the Main S3 Bucket
    Value: !Join [ '.', [ !Ref SiteMainBucket, !FindInMap [ RegionToS3Domain, !Ref "AWS::Region", domain ] ]]
    Export:
      Name: !Sub "${AWS::StackName}-WebsiteMainBucketStaticHostingEndopoint"


  # Name of the Experiment S3 bucket
  WebsiteExperimentBucket:
    Description: Name of the Experiment S3 bucket
    Value: !Ref SiteExperimentBucket
    Export:
      Name: !Sub "${AWS::StackName}-WebsiteExperimentBucket" 
      
  # Endpoint used for S3 Origin
  WebsiteExperimentBucketDomainName:
    Description: S3 endpoint of the Experiment bucket
    Value: !GetAtt SiteExperimentBucket.DomainName
    Condition: SetUpABtesting
    Export:
      Name: !Sub "${AWS::StackName}-WebsiteExperimentBucketDomainName"

  # Endpoint used for Custom Origin
  WebsiteExperimentBucketStaticHostingEndpoint:
    Description: Static Website Hosting endpoint of the Experiment S3 Bucket
    Value: !Join [ '.', [ !Ref SiteExperimentBucket, !FindInMap [ RegionToS3Domain, !Ref "AWS::Region", domain ] ]]
    Export:
      Name: !Sub "${AWS::StackName}-WebsiteSiteExperimentBucketStaticHostingEndopoint"
