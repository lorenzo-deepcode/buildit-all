---

Description: Application Deployment on ECS
AWSTemplateFormatVersion: 2010-09-09

Parameters:
  Environment:
    Description: Stack environment
    Type: String

  FoundationStackName:
    Description: Foundation stack name
    Type: String

  ComputeStackName:
    Description: Compute stack name
    Type: String

  DbStackName:
    Description: Database stack name
    Type: String

  InfraDevBucket:
    Description: App S3 Bucket
    Type: String

  PublicDomainName:
    Description: Public Domain Name for sites and services created by this stack.
    Type: String

  HealthCheckPath:
    Description: HTTP request path used for health checks against related container.
    Type: String
    Default: /

  # ParameterStoreNamespace:
  #   Description: Namespace in parameter store from which configuration values will be taken.
  #   Type: String

  Repository:
    Description: ECR Repository
    Type: String

  ApplicationName:
    Description: Name of the application (part of hostname)
    Type: String

  Prefix:
    Description: Discriminator for other "owners."  The real environments will be blank
    Type: String
    Default: ""

  ContainerPort:
    Type: Number

  TaskDesiredCount:
    Type: Number
    Default: 0

  ListenerRulePriority:
    Description: The priority for the listener rule
    Type: Number

  Tag:
    Type: String
    Default: latest

Conditions:
  ShouldCreatePreferredCname: !And
  - !Equals [ !Ref Environment, production ]
  - !Equals [ !Ref Prefix, "" ]

  EnableTestUser:
    !Equals [!Ref Environment, integration]

Resources:
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId:
        Fn::ImportValue: !Sub "${FoundationStackName}--VpcId"
      Port: !Ref ContainerPort
      Protocol: HTTP
      Matcher:
        HttpCode: 200-301   # Account for HTTPS redirect
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: !Ref HealthCheckPath
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 30

  AppEnvDns:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: !Sub "${PublicDomainName}."
      Comment: DNS for ELB.
      RecordSets:
      - Name: !Sub "${Prefix}${Environment}-${ApplicationName}.${PublicDomainName}."
        Type: A
        AliasTarget:
          HostedZoneId:
            Fn::ImportValue: !Sub "${FoundationStackName}--ALB--CanonicalHostedZoneID"
          DNSName:
            Fn::ImportValue: !Sub "${FoundationStackName}--ALB--DNSName"

  ListenerRuleHttp:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn:
        Fn::ImportValue: !Sub "${FoundationStackName}--ALB--HttpListener"
      Priority: !Ref ListenerRulePriority
      Conditions:
        - Field: host-header
          Values:
            - !Sub "${Prefix}${Environment}-${ApplicationName}.${PublicDomainName}"
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward

  ListenerRuleHttps:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn:
        Fn::ImportValue: !Sub "${FoundationStackName}--ALB--HttpsListener"
      Priority: !Ref ListenerRulePriority
      Conditions:
        - Field: host-header
          Values:
            - !Sub "${Prefix}${Environment}-${ApplicationName}.${PublicDomainName}"
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward

  PreferredAppDns:
    Condition: ShouldCreatePreferredCname
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: !Sub "${PublicDomainName}."
      Comment: Preferred ProductionDNS for ALB.
      RecordSets:
      - Name: !Sub "${Prefix}${ApplicationName}.${PublicDomainName}."
        Type: A
        AliasTarget:
          HostedZoneId:
            Fn::ImportValue: !Sub "${FoundationStackName}--ALB--CanonicalHostedZoneID"
          DNSName:
            Fn::ImportValue: !Sub "${FoundationStackName}--ALB--DNSName"

  PreferredListenerRuleHttp:
    Condition: ShouldCreatePreferredCname
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn:
        Fn::ImportValue: !Sub "${FoundationStackName}--ALB--HttpListener"
      Priority: !Sub "${ListenerRulePriority}9"
      Conditions:
        - Field: host-header
          Values:
            - !Sub "${Prefix}${ApplicationName}.${PublicDomainName}"
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward

  PreferredListenerRuleHttps:
    Condition: ShouldCreatePreferredCname
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn:
        Fn::ImportValue: !Sub "${FoundationStackName}--ALB--HttpsListener"
      Priority: !Sub "${ListenerRulePriority}9"
      Conditions:
        - Field: host-header
          Values:
            - !Sub "${Prefix}${ApplicationName}.${PublicDomainName}"
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward

  ExternalHealthCheck:
    Type: AWS::Route53::HealthCheck
    Properties:
      HealthCheckConfig:
        Type: HTTPS
        FullyQualifiedDomainName: !Sub "${Prefix}${Environment}-${ApplicationName}.${PublicDomainName}."
        EnableSNI: true
        FailureThreshold: 3
        ResourcePath:  !Ref HealthCheckPath
      HealthCheckTags:
      - Key: "Name"
        Value: !Sub "${Prefix}${Environment}-${ApplicationName}.${PublicDomainName}."

  # Note:  this only works properly if in us-east-1.  Amazon, in its infinite wisdom, has decided
  # that alarms created for R53 health checks can only work if the alarm is in us-east-1, even though
  # R53 is region-less.  Nice.
#  ExternalHealthAlarm:
#    Type: AWS::CloudWatch::Alarm
#    Properties:
#      ActionsEnabled: true
#      AlarmName: !Sub "${Prefix}${Environment}-${ApplicationName}.${PublicDomainName}."
#      AlarmDescription: !Sub "Alarm when ${Prefix}${Environment}-${ApplicationName}.${PublicDomainName} not reachable via Route53 health check."
#      AlarmActions:
#        - Fn::ImportValue: !Sub "${FoundationStackName}--SNS--Topic--Ops"
#      MetricName: HealthCheckStatus
#      Namespace: AWS/Route53
#      Statistic: Minimum
#      Threshold: 1.0
#      ComparisonOperator: LessThanThreshold
#      Period: 60
#      EvaluationPeriods: 1
#      Dimensions:
#        - Name: HealthCheckId
#          Value: !Ref ExternalHealthCheck

  ECSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "ecs.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole

  Service:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Fn::ImportValue: !Sub "${ComputeStackName}--Cluster"
      Role: !Ref ECSServiceRole
      DesiredCount: !Ref TaskDesiredCount
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
        - ContainerName: !Ref ApplicationName
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref TargetGroup

  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref AWS::StackName
      RetentionInDays: 60

  TaskDefinitionServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "ecs-tasks.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              # TODO:  this needs to be tightened-up.
              - Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*
                Effect: Allow
                Action:
                  - ssm:GetParameters

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${AWS::StackName}-${ApplicationName}
      TaskRoleArn: !Ref TaskDefinitionServiceRole
      ContainerDefinitions:
        - Name: !Ref ApplicationName
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${Repository}:${Tag}
          Essential: true
          Memory: 256
          PortMappings:
            - ContainerPort: !Ref ContainerPort
              HostPort: 0
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref AWS::StackName
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Ref ApplicationName
          Environment:
            - Name: Tag
              Value: !Ref Tag
            - Name: TWIG_API_LDAP_URL
              Value: ldap://todo
            - Name: TWIG_API_LOG_CONSOLE
              Value: true
            - Name: TWIG_API_LOG_FILE
              Value: true
            - Name: TWIG_API_LOG_LEVEL
              Value: info
            - Name: TWIG_API_TENANT
              Value: ''
            - Name: ENABLE_TEST_USER
              Value: !If [EnableTestUser, true, false]
            - Name: TWIG_API_DB_URL
              Value: !Join
                - ''
                - - "http://"
                  - Fn::ImportValue: !Sub "${DbStackName}--CouchDbDnsName"
                  - ':5984'

Outputs:
  ApplicationUrl:
    Description: URL of the application
    Value: !Sub "https://${Prefix}${Environment}-${ApplicationName}.${PublicDomainName}"

  PreferredApplicationUrl:
    Condition: ShouldCreatePreferredCname
    Description: URL of the application
    Value: !Sub "https://${Prefix}${ApplicationName}.${PublicDomainName}"
