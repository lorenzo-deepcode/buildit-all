import jp.classmethod.aws.gradle.s3.AmazonS3FileUploadTask
import jp.classmethod.aws.gradle.s3.CreateBucketTask

buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "jp.classmethod.aws:gradle-aws-plugin:0.+"
    }
}


apply plugin: 'java'
apply plugin: 'jp.classmethod.aws.s3'
apply plugin: "jp.classmethod.aws.lambda"
apply plugin: "jp.classmethod.aws.cloudformation"

build.finalizedBy('createTerraformVarFile')

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    compile "com.amazonaws:aws-lambda-java-core:1.1.0"
    compile "com.amazonaws:aws-lambda-java-events:2.1.0"
    compile "com.amazonaws:aws-java-sdk-s3:1.11.334"
    compile "com.buildit:Parser:1.0.3"
    compile "com.buildit.documents:document-repository:1.0.0"
    testCompile 'junit:junit:4.11'
    testCompile 'org.assertj:assertj-core:3.10.0'
}

task fatJar(type: Jar) {
    zip64=true
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task createBucket(type: CreateBucketTask, dependsOn: fatJar) {
    bucketName lambdaFunctionBucket
    ifNotExists true
}

task uploadJar(type: AmazonS3FileUploadTask, dependsOn: createBucket) {
    file file("${fatJar.archivePath}")
    bucketName lambdaFunctionBucket
    key "${fatJar.archiveName}"
}

task createTerraformVarFile << {
    def newProps = project.properties

    def propsFile = new File("${project.buildDir}/variables.tfvars")
    propsFile.parentFile.mkdirs()
    propsFile.createNewFile()

    propsFile.withWriterAppend( 'UTF-8' ) { fileWriter ->
        fileWriter.writeLine ''
        newProps.each { key, value ->
            fileWriter.writeLine "$key=\"$value\""
        }
    }
}
