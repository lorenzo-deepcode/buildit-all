buildscript {
    // these override spring boot defaults
    // find defaults here -
    // 1.5.x - https://github.com/spring-projects/spring-boot/blob/1.5.x/spring-boot-dependencies/pom.xml
    // master - https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-dependencies/pom.xml
    // double check version of spring boot
    ext['hibernate.version'] = '5.2.14.Final'
    ext['jackson.version'] = '2.9.4'
    ext['mariadb.version'] = '2.2.2'
    ext['h2.version'] = '1.4.196'
    ext['junit-jupiter.version'] = '5.1.0'
    ext['junit-platform.version'] = '1.1.0'
    ext['mockito.version'] = '2.15.0'

    // these are our additions (some become defaults in spring boot 2.x)
    ext['expekt.version'] = '0.5.0'
    ext['hamkrest.version'] = '1.4.2.2'
    ext['springfox.version'] = '2.8.0'
    ext['mockito-kotlin.version'] = '1.5.0'
    ext['jacoco.version'] = '0.8.0'
    ext['threeten.version'] = '1.3.2'
    ext['ktlint.version'] = '0.18.0'
    ext['nimbus-jose-jwt.version'] = '5.5'
    ext['detekt.version'] = '1.0.0.RC6-3'

    repositories {
        mavenCentral()
    }
    configurations.classpath {
        resolutionStrategy { force "com.github.shyiko:ktlint:${property('ktlint.version')}" }
    }
    dependencies {
        classpath("org.junit.platform:junit-platform-gradle-plugin:${property('junit-platform.version')}")
        classpath 'com.kncept.junit5.reporter:junit-reporter:1.1.0'
    }
}

plugins {
    id 'org.springframework.boot' version '1.5.12.RELEASE'
    id 'org.jetbrains.kotlin.jvm' version '1.2.50'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.2.50'
    id 'org.jetbrains.kotlin.plugin.jpa' version '1.2.50'
    id 'org.jmailen.kotlinter' version '1.8.1'
//    id 'com.gorylenko.gradle-git-properties' version '1.4.17'
    id 'io.gitlab.arturbosch.detekt' version '1.0.0.RC6-3'
}

repositories {
    maven { url 'https://jitpack.io' }
    mavenCentral()
}


apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'idea'
apply plugin: 'jacoco'
apply plugin: 'com.kncept.junit5.reporter'

group = 'com.buildit'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

sourceSets {
    'test-e2e' {
        kotlin {
            srcDir files('src/test-e2e/kotlin')
        }
        resources.srcDir files('src/test-e2e/resources')
    }
}

idea {
    module {
        testSourceDirs += files('src/test-e2e/kotlin')
    }
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
        allWarningsAsErrors = true
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
        allWarningsAsErrors = true
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
        allWarningsAsErrors = true
    }
}

repositories {
    mavenCentral()
}

springBoot {
    buildInfo()
}

bootRun {
    addResources = true
}

configurations {
    testE2eCompile.extendsFrom testCompile
    testE2eRuntime.extendsFrom testRuntime
}

kotlinter {
    continuationIndentSize = 4
}

detekt {
    version = "${property('detekt.version')}"
    profile("main") {
        input = "$projectDir/src"
        config = "$projectDir/detekt.yml"
        output = "$buildDir/reports/detekt"
    }
}

check.dependsOn detektCheck
detektCheck.shouldRunAfter lintKotlin

lintKotlin.shouldRunAfter compileTestKotlin

junitPlatform {
    platformVersion property('junit-platform.version')
}

junitPlatformTest.shouldRunAfter detektCheck

afterEvaluate {
    jacoco {
        applyTo junitPlatformTest
        toolVersion = property('jacoco.version')
    }

    task junit5CodeCoverageReport(type: JacocoReport) {
        executionData junitPlatformTest
        sourceSets sourceSets.main
        sourceDirectories = files(project.sourceSets.main.allSource.srcDirs)
        classDirectories = files(files(project.sourceSets.main.output).collect {
            fileTree(dir: it, exclude: [
                '**/dto'
            ])
        })
        reports {
            xml.enabled = true
            html.enabled = true
        }
    }

    task junit5CodeCoverageVerification(type: JacocoCoverageVerification) {
        executionData junitPlatformTest
        sourceSets sourceSets.main
        sourceDirectories = files(project.sourceSets.main.allSource.srcDirs)
        classDirectories = files(files(project.sourceSets.main.output).collect {
            fileTree(dir: it, exclude: [
                '**/dto'
            ])
        })
        violationRules {
            rule {
                limit {
                    minimum = 0.75
                }
            }
        }
    }

    test.dependsOn junit5CodeCoverageReport
    // can't really enforce this until we have a way to ignore data classes and the things they generate
    // https://github.com/jacoco/jacoco/issues/552
    check.dependsOn junit5CodeCoverageVerification
}

dependencies {
    compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    compile("org.jetbrains.kotlin:kotlin-reflect")

    //spring boot
    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-actuator-docs')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-data-jpa')

    // security
    compile('org.springframework.boot:spring-boot-starter-security')
    compile("com.nimbusds:nimbus-jose-jwt:${property('nimbus-jose-jwt.version')}")

    // for kotlin data classes
    compile("com.fasterxml.jackson.module:jackson-module-kotlin")
    compile("com.fasterxml.jackson.datatype:jackson-datatype-jdk8")
    compile("com.fasterxml.jackson.datatype:jackson-datatype-jsr310")

    // swagger
    compile("io.springfox:springfox-swagger2:${property('springfox.version')}")
    compile("io.springfox:springfox-bean-validators:${property('springfox.version')}")
    compile("io.springfox:springfox-swagger-ui:${property('springfox.version')}")

    //database
    compile("com.h2database:h2")
    compile("org.mariadb.jdbc:mariadb-java-client") // dropin replacement for mysql with aurora support

    // joda time concepts left out of java.time apis
    compile("org.threeten:threeten-extra:${property('threeten.version')}")

    compileOnly('org.springframework.boot:spring-boot-configuration-processor')

    runtime('org.springframework.boot:spring-boot-devtools')

    testCompile('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'junit', module: 'junit'
    }
    testCompile("org.springframework.security:spring-security-test")
    testCompile("com.winterbe:expekt:${property('expekt.version')}")
    testCompile("org.junit.jupiter:junit-jupiter-api:${property('junit-jupiter.version')}")
    testCompile("com.natpryce:hamkrest:${property('hamkrest.version')}")
    testCompile("com.nhaarman:mockito-kotlin:${property('mockito-kotlin.version')}")
    testCompile("com.github.sbrannen:spring-test-junit5:1.0.0")

    testRuntime("org.junit.jupiter:junit-jupiter-engine:${property('junit-jupiter.version')}")
    testRuntime("org.junit.platform:junit-platform-console:${property('junit-platform.version')}")
}

// https://stackoverflow.com/questions/45297339/junit-5-under-gradle-with-multiple-source-sets
task 'test-e2e'(
    type: JavaExec,
    description: 'Runs the e2e tests.',
    group: 'Verification'
) {
    dependsOn testE2eClasses
    finalizedBy 'junitHtmlReport'

    outputs.upToDateWhen { false }
    classpath = sourceSets.'test-e2e'.runtimeClasspath

    main = 'org.junit.platform.console.ConsoleLauncher'
    args = ['--scan-class-path',
            sourceSets.'test-e2e'.output.getClassesDirs().asPath,
            '--reports-dir', "${buildDir}/test-results/test-e2e"]
}

